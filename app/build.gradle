apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.nanogiants.android-versioning'

/**
 * This task will create a file version.txt that contains
 * the version name used to create tag and release on github
 */
apply from: '../buildfile/version-utils.gradle'
//apply from: '../buildfile/signing_configs.gradle'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.ciriti.stockmarket"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode = Long.valueOf(VERSION_CODE)
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "SOCKET_URL", '"wss://ws-feed.gdax.com"'
            buildConfigField "String", "URL_PRODUCTS", '"https://api.gdax.com/products"'
        }
        release {
            buildConfigField "String", "SOCKET_URL", '"wss://ws-feed.gdax.com"'
            buildConfigField "String", "URL_PRODUCTS", '"https://api.gdax.com/products"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release // It is signed using the github action, no need to set it here
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation project(":okhttp-socket-ext")
    implementation "io.github.ciriti:okhttp-socket-ext:1.0.1"

    implementation Libs.kotlin_stdlib_jdk7
    implementation Libs.kotlin_reflect
    implementation Libs.appcompat
    implementation Libs.core_ktx
    implementation Libs.constraintlayout
    implementation Libs.kotlinx_coroutines_android
    implementation Libs.material

    implementation Libs.arrow_core

    // di
    implementation Libs.koin_core
    implementation Libs.koin_android_viewmodel

    // web socket
    implementation Libs.scarlet
    implementation Libs.scarlet_websocket_okhttp
    implementation Libs.scarlet_stream_adapter_coroutines
    implementation Libs.scarlet_stream_adapter_rxjava
    implementation Libs.scarlet_message_adapter_moshi
    implementation Libs.scarlet_lifecycle_android

    implementation Libs.converter_gson
    implementation Libs.okhttp

    implementation Libs.lifecycle_viewmodel
    implementation Libs.lifecycle_runtime_ktx
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    androidTestImplementation Libs.koin_test
    androidTestImplementation Libs.androidx_test_ext_junit

    androidTestImplementation Libs.androidx_test_runner
    androidTestImplementation Libs.androidx_test_rules
    androidTestImplementation Libs.espresso_core
    androidTestImplementation Libs.espresso_contrib
    androidTestImplementation Libs.scarlet_websocket_scarlet_core_internal
    androidTestImplementation Libs.mockk_android

    testImplementation Libs.kotlinx_coroutines_test
    testImplementation Libs.scarlet_websocket_scarlet_core_internal
    testImplementation Libs.junit_junit
    testImplementation Libs.mockk
    testImplementation Libs.core_testing
    androidTestImplementation Libs.androidx_test_ext_junit
    androidTestImplementation Libs.espresso_core

    //RXJava2
    implementation group: 'io.reactivex.rxjava2', name: 'rxkotlin', version: '2.4.0'
    implementation group: 'io.reactivex.rxjava2', name: 'rxandroid', version: '2.1.1'
    implementation group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.19'

}

task bumpVersionCode(){
    doLast {
        Long versionCode = getProperty("VERSION_CODE_TEST").toLong()
        Long bumpedVersionCode = versionCode + 1
        saveProperty("VERSION_CODE_TEST", bumpedVersionCode, "gradle.properties")
        println("==========> " + getProjectProperty("VERSION_CODE_TEST", "gradle.properties"))
        println("project.rootDir: " + project.rootDir)
        println("project.projectDir: " + project.projectDir)
    }
}

private void saveProperty(String propertyKey, Long valueProperty, String propsFileName) {
    saveProperty(propertyKey, "$valueProperty", propsFileName)
}

private void saveProperty(String propertyKey, String valueProperty, String propsFileName) {
    def versionProps = getModuleProperties(propsFileName)
    versionProps[propertyKey] = valueProperty
    versionProps.store(file(propsFileName).newWriter(), null)
}

def getProjectProperty(String propertyKey, String propsFileName) {
    def propsFile = file(propsFileName)
    if (!propsFile.exists()) propsFile.createNewFile()
    def versionProps = new Properties()
    versionProps.load(new FileInputStream(propsFile))
    return versionProps[propertyKey]
}

def getModuleProperties(String propsFileName) {
    def propsFile = file(propsFileName)
    if (!propsFile.exists()) propsFile.createNewFile()
    def versionProps = new Properties()
    versionProps.load(new FileInputStream(propsFile))
    return versionProps
}

private void commit(versionName) {
    Process addChanges = ['git', 'add', project.projectDir + '/gradle.properties'].execute(null, project.rootDir)
    addChanges.waitForProcessOutput(System.out, System.err)

    Process createCommit = ['git', 'commit', "-m Release ${versionName}"].execute(null,  project.rootDir)
    createCommit.waitForProcessOutput(System.out, System.err)

//    Process push = ['git', 'push'].execute(null,  project.rootDir)
//    push.waitForProcessOutput(System.out, System.err)
}